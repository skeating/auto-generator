How to create code with auto-generator

************************************

UPDATE: July 13th

This is now integrated and will pull all teh files together.

What as user would need to do: 

1. Create the SBML elements within the createNewElementDictObj 
file - following the template as detailed below. One function for each
element.

2. Create the function to define the package in createNewPackage file 
- following the template shown below. This will call the functions
created in Step 1.

3. Edit the createPackage function in the createNewPackage file to include
an option for this package - calling the function created in Step 2.

4. Move the template*.txt files to the directory that you intend to run
the code from.
   (This will improve but for now must be done manually.)
   
5. Run the 'createDirStruct.py nameOfPackage' function. 

6. Run the 'run.py nameOfPackage' function.

***********************************************


createNewElementDictObj.py
==========================

Here each element is described by creating a dictionary for each attribute 
specifying the type, whether it is a required attribute and the name of the 
attribute.

So

  id = dict({'type': 'SId', 'reqd' : False, 'name':'id'})

specifies an attribute 'id' with type SId that is not required
  
The attributes are all added to a List, for example

  attributes = [id, qs, effect, name, sign, maxL ]

  where each member is a dict object as specified above.
  
The overall element is then created as a dictionary containing

	name = the name of the class
	package = the name of the SBML L3 package
	typecode = the value of this class in the enueration of SBMLTypecodes for this package
	hasListOf = true if this class (XYZ) also has a corresponding class ListOfXYZ
	attribs = the List of attributes already created
	hasChildren = true if this class has child elements (excluding a math element)
	hasMath = true if this class has a child math element (defaults to False)
	
Thus the dictionary object for an Input class in package Qual is defined as

  element = dict({'name': 'Input', 'package': 'Qual', 'typecode': 'SBML_QUAL_INPUT', 
                  'hasListOf': True, 'attribs':attributes, 'hasChildren':False, 'hasMath':False}) 
				  
*****************************************************

createNewPackage.py
===================

creates a dictionary object that specifies the entire package

it creates a dictionary object for each element e.g.

  inp = dict({'name': 'Input', 'typecode': 'SBML_QUAL_INPUT'})
  
then a List containing all the elements
  elem = [qs, tr, inp, out, ft, dt]

it then creates a List element for the elements available to each plugin

  model_elem = [qs, tr]

and a dictionionary object for each plugin indictating which sbase object 
is plugged into and the elements that are plugged into this element

So Qual has a plugin on Model object that adds the qs and tr elements

  model_plug = dict({'sbase': 'Model', 'extension': model_elem}) 

Then create a List of all plugins

  plugins = [model_plugin]
  
Each sbml class object must then be created from the createNewElementDictObj code.

  sbml_inp = createNewElementDictObj.createQualInput()

and a list of these created

  classes =[sbml_inp, sbml_qs, sbml_tr etc.

 Finally a dictionary object 

  package = dict({'name' : 'Qual', 'elements': elem, 'plugins': plug, 'number': 1100,
                  'sbmlElements': classes, 'offset': 3000000})

	with 
	name = name of the package
	elements = List of all elements in the package
	plugins = List of all plugins for the package
	number = the first integer to be used in the enumeration of the SBMLTypecodes for this package
	sbmlElements = List of all sbml_class dict objects (created by createNewElementDictObj)
	offset = number that the error code will use as an offset from the 5 digit number used in specs

****************************